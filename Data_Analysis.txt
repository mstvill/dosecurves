##################################################################
##################################################################
#### This script reads in the opioid data and structures it in
#### the necessary way for the model fitting routines.
##################################################################
##################################################################

set.seed(1)
data<-read.csv("opioid_data.csv",header=TRUE)

## load necessary packages ##
library(splines)
library(BayesLogit)
library(Matrix)
library(mvtnorm)
library(statmod)

#########################################################
#### structure data for Bayesian analysis 
data$X4<-as.factor(data$X4)
data$X5<-as.factor(data$X5)
data$X6<-as.factor(data$X6)
data.num<-model.matrix(~dose + X1 + X2 + X3 + X4 + X5 + X6, data=data)
data.num<-cbind(data$trial,data$patient,data$visit,data$using,data.num[,-1])
data.num<-as.data.frame(data.num)
names(data.num)[1:4]<-c("trial","patient","visit","using")

pat.id<-unique(data.num$patient)
K<-length(unique(data.num$trial))
m<-length(pat.id)


comlist<-list()  ## ith element of this list is data for ith individual 
for (i in 1:m){
  temp<-data.num[data.num[,2]==pat.id[i],]
  comlist[[i]]<-temp
}
names(comlist)<-c(as.character(pat.id))

n.l<-list()   ## ith element of this list is a single element identifying the number of observations for ith individual
Y.l<-list()   ## ith element of this list is a vector identifying the outcome of the opioid tests for ith individual
X.l<-list()   ## ith element of this list is a design matrix corresponding to the outcome vector, used for fixed effects  
Z.l<-list()   ## ith element of this list is a design matrix corresponding to the outcome vector, used for random effects
M.l<-list()   ## ith element of this list is a design matrix: B-splines with df=9; integral approx
tr.l<-list()  ## ith element of this list is a single element identifying which trial ith individual participated in

#########################################################
#### construct B-spline basis matrix and 
#### associated smoothing penalty matrix 
t<-1:9                         ## time points
nijk=length(t)
L=5                            ## number of basis functions
B<-as.matrix(bs(1:nijk,df=L))  ## B-spline basis matrix with cubic basis functions and two interior knots
Br=(B[-1,]-B[-nijk,])
DBr=Br[-1,]-Br[-(nijk-1),]

R = matrix(-99,nrow=L,ncol=L)
for(i in 1:L){
  for(j in 1:L){
    H = t(t(DBr[,i])*DBr[,j])
    R[i,j] = (1/2)*(H[1]+2*sum(H[2:(nijk-3)])+H[nijk-2])
  }
}

#########################################################
#### construct design matrix for functional covariate
#### with B-spline coefficients and design matrix for
#### fixed effects
m1=1
for (i in 1:m){
  patdat<-comlist[[i]]
  n<-dim(patdat)[1]
  n.l[[m1]]<-n
  tr<-patdat$trial[1]
  tr.l[[m1]]<-tr
  D.t<-patdat$dose
  t.id<-1:n
  Y.t<-patdat$using
  Y.l[[m1]]<-Y.t
  D<-matrix(-99,nrow=n,ncol=nijk)
  for(j in 1:n){ 
    if (t.id[j]==1){D[j,]<-0}
    if (t.id[j]>1){
      if (t.id[j]<=nijk){
        prev<-(nijk-(t.id[j]-2)):nijk
        D[j,prev]<-D.t[1:(t.id[j]-1)]
        D[j,-prev]<-0
      }else{
        D[j,]<-D.t[(t.id[j]-nijk):(t.id[j]-1)]
      }
    }
  }
  # integral approx. of functional covariate and B-spline coefficients
  M.t<-matrix(-99,nrow=n,ncol=L)
  for (j in 1:n){
    for (l in 1:L){
      h=t(t(D[j,])*B[,l])
      M.t[j,l]=(1/2)*(h[1]+2*sum(h[2:(nijk-1)])+h[nijk])
    }}
  M.l[[m1]]<-as.matrix(M.t)
  X.t<-cbind(1,patdat[t.id,-c(1:5)])
  X.l[[m1]]<-as.matrix(X.t)
  m1=m1+1
}

#########################################################
#### construct design matrices for random effects
Z1.l<-lapply(1:m,function(i){Xt<-X.l[[i]]; as.matrix(Xt[,1])})  ## subject-specific random effect
Z2.l<-lapply(1:m,function(i){                                   ## trial-specific random effect
  tr=tr.l[[i]];
  n=n.l[[i]];
  mat=matrix(-99,nrow=n,ncol=K);
  mat[,tr]=1;
  mat[,-tr]=0;
  mat
})

#########################################################
#### source model fitting routine
source("Opioid_FGLM_Est.txt")

#########################################################
#### fit the model
time1<-Sys.time()
res<-FGLM.est(X.l=X.l,M.l=M.l,Z1.l=Z1.l,Z2.l=Z2.l,Y.l=Y.l,R=R,K=K,m=m,nijk=nijk)
time2<-Sys.time()

#########################################################
#### analyze the results
time2-time1
burn<-5000:10000

## coefficient function ##
eta.est<-round(apply(res$eta[burn,],2,mean),3)
eta.sd<-round(apply(res$eta[burn,],2,sd),3)
beta.est<-round(apply(res$beta[burn,],2,mean),3)
beta.sd<-round(apply(res$beta[burn,],2,sd),3)
beta.lcl<-round(apply(res$beta[burn,],2,quantile,probs=.025))
beta.ucl<-round(apply(res$beta[burn,],2,quantile,probs=.975))
dose.est<-round(mean(res$dose[burn]),2)
dose.sd<-round(sd(res$dose[burn]),2)
dose.lcl<-round(quantile(res$dose[burn],probs=.025),2)
dose.ucl<-round(quantile(res$dose[burn],probs=.975),2)

## fixed effects ##
alpha.est<-round(apply(res$alpha[burn,],2,mean),2)
alpha.sd<-round(apply(res$alpha[burn,],2,sd),2)
alpha.lcl<-round(apply(res$alpha[burn,],2,quantile,probs=.025),2)
alpha.ucl<-round(apply(res$alpha[burn,],2,quantile,probs=.975),2)